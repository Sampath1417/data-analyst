# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dLC8l1AZHYJ3U8XDhy2pGHFApbT4GuPZ
"""

import pandas as pd

# Load the dataset
data_url = '/content/Amazon Sale Report.csv'  # Replace with the actual path
df = pd.read_csv(data_url)

# Display the first few rows of the dataset to understand its structure
df.head()

import pandas as pd

# Load the dataset, ensuring the file path is correct
data_url = '/content/Amazon Sale Report.csv'
df = pd.read_csv(data_url)

# Print the columns of the DataFrame to see if 'date' is present
print(df.columns)

# If 'date' column exists but has a different name, rename it
# For example, if the column is named 'Order Date':
# df = df.rename(columns={'Order Date': 'date'})

# Display the first few rows of the dataset
df.head()

# Continue with the rest of your code...

data_url = '/content/Amazon Sale Report.csv'
df = pd.read_csv(data_url)

# 1. Check the column names:
print(df.columns)

# If 'amount' is not in the columns, find the correct column name.
# Let's assume the correct name is 'Item Total'
# 2. Rename the column (if necessary):
df = df.rename(columns={'Item Total': 'amount'})  # Replace 'Item Total' with the actual column name

# Now, try calculating the total sales again:
total_sales = df['Amount'].sum()

# Product Categories Sales
import matplotlib.pyplot as plt # Import the necessary library

category_sales = df.groupby('Category')['Amount'].sum()

# Plotting Categories
category_sales.plot(kind='bar', figsize=(10, 6))
plt.title('Category')
plt.xlabel('Category')
plt.ylabel('Sales Amount')
plt.xticks(rotation=45)
plt.show()

# Distribution of Sizes
size_sales = df.groupby('Size')['Qty'].sum()

# Plotting Product Sizes
size_sales.plot(kind='bar', figsize=(10, 6))
plt.title('Qty Sold by Product Size')
plt.xlabel('Size')
plt.ylabel('Qty Sold')
plt.xticks(rotation=45)
plt.show()

# Fulfillment Method Distribution
# Assuming 'fulfillment' is the correct column name
fulfillment_sales = df.groupby('Fulfilment')['Amount'].sum()

# Plotting Fulfillment Methods
fulfillment_sales.plot(kind='pie', figsize=(8, 8), autopct='%1.1f%%')
plt.title('Sales Distribution by Fulfilment Method')
plt.ylabel('')
plt.show()

# Average shipping time (if available)
# Assuming 'ship-date' is the correct column name and it contains date information
if 'ship-date' in df.columns:
    # Convert 'ship-date' to datetime if it's not already
    df['ship-date'] = pd.to_datetime(df['ship-date'])
    # Calculate average shipping time (This will need further logic based on your data)
    # ...
    # print(f"Average Shipping Time: {average_shipping_time} days")

# Customer purchase frequency
# Check if 'customer_id' exists in the columns, and correct it if needed
print(df.columns)  # Print the columns to check the actual name
customer_orders = df.groupby('Order ID').size()  # Replace 'Customer ID' with the actual name if different

# Segment customers: e.g., frequent buyers (more than 5 orders)
frequent_buyers = customer_orders[customer_orders > 5]  # Example: more than 5 orders

# Display frequent buyers count
print(f"Frequent Buyers: {len(frequent_buyers)}")

# Distribution of customer purchase frequency
customer_orders.hist(bins=30, figsize=(10, 6))
plt.title('Distribution of Customer Purchase Frequency')
plt.xlabel('Number of Orders')
plt.ylabel('Number of Customers')
plt.show()

import geopandas as gpd

# Assuming the dataset has 'state' or 'city' columns
geographical_sales = df.groupby('ship-state')['Amount'].sum()

# Plotting geographical sales distribution by state
geographical_sales.plot(kind='bar', figsize=(12, 8))
plt.title('Sales by State')
plt.xlabel('State')
plt.ylabel('Sales Amount')
plt.xticks(rotation=90)
plt.show()

# Optional: Mapping geographical sales distribution using Geopandas (if lat/long data is available)
import geopandas as gpd

# Download the 'naturalearth_lowres' dataset from the provided link
!wget https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/110m/cultural/ne_110m_admin_0_countries.zip
!unzip ne_110m_admin_0_countries.zip

# Load the downloaded shapefile using geopandas.read_file()
gdf = gpd.read_file('/content/ne_110m_admin_0_countries.zip')  # Replace with the actual path to the downloaded shapefile

# Continue with the rest of your code...
# Check the actual column name for country/region in gdf
print(gdf.columns)
# Assuming the column name is 'ADMIN', change 'name' to 'ADMIN'
merged = gdf.set_index('ADMIN').join(geographical_sales)  # Replace 'ADMIN' with the actual column name if different
merged.plot(column='Amount', legend=True, figsize=(12, 8))
plt.title('Geographical Distribution of Sales')
plt.show()

total_sales = df['Amount'].sum()
print(f"Total Sales: {total_sales}")

total_sales_per_month = df.groupby(df['Date'].dt.to_period('M'))['Amount'].sum()
total_sales_per_month.plot(kind='line', figsize=(10, 6), title="Total Sales Over Time")
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.show()

category_sales.plot(kind='bar', figsize=(10, 6), title="Sales by Product Category")
plt.xlabel('Category')
plt.ylabel('Sales Amount')
plt.xticks(rotation=45)
plt.show()

size_sales.plot(kind='bar', figsize=(10, 6), title="Quantity Sold by Product Size")
plt.xlabel('Product Size')
plt.ylabel('Quantity Sold')
plt.xticks(rotation=45)
plt.show()

fulfillment_sales.plot(kind='pie', figsize=(8, 8), autopct='%1.1f%%', title="Sales Distribution by Fulfillment Method")
plt.ylabel('')
plt.show()

customer_orders.hist(bins=30, figsize=(10, 6))  # Removed title argument here
plt.title("Customer Purchase Frequency Distribution")  # Set title using plt.title()
plt.xlabel('Number of Orders')
plt.ylabel('Number of Customers')
plt.show()

geographical_sales.plot(kind='bar', figsize=(12, 8), title="Sales by State")
plt.xlabel('State')
plt.ylabel('Sales Amount')
plt.xticks(rotation=90)
plt.show()